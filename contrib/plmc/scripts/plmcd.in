#!/bin/sh
#
### BEGIN INIT INFO
# Provides: plmcd
# Required-Start: $local_fs $remote_fs $network $syslog $plmcboot
# Required-Stop: $local_fs $remote_fs $network $syslog $plmcboot
# Should-Start: 
# Should-Stop: 
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: starts/stops the plmcd daemon
# Description: starts/stops the plmcd daemon
### END INIT INFO

prog="plmcd"
configfile=@sysconfdir@/plmcd.conf
binary=@sbindir@/$prog
lockfile=@localstatedir@/lock/subsys/$prog
bootlockfile=/var/lock/subsys/plmcboot
pidfile=@localstatedir@/run/$prog.pid
timeout=10

# Source LSB functions library
. /lib/lsb/init-functions

if [ ! -r $configfile ]; then
	logger -t $prog "can't read $configfile exiting."
	exit 6
fi	


RETVAL=0

start() {
        [ -x $binary ] || exit 5
        echo -n "Starting $prog: "
        if [ ! -f $bootlockfile ]
        then
                RETVAL=1
        fi
        while [ $RETVAL -eq 1 ]
        do
                sleep 1
                if [ ! -f $bootlockfile ]
                then
                      RETVAL=1
                else
                      RETVAL=0
                fi
                let timeout=$timeout-1
                if [ $timeout -le 0 ]
                then
                     break
                fi
        done

        if [ $RETVAL -eq 1 ]; then
                echo "Starting $prog failed. Run plmcboot start first"
                return 1
        fi
     
        start_daemon $binary -c $configfile
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
		touch $lockfile
		log_success_msg
	else
		log_failure_msg
	fi
        return $RETVAL
}

stop() {
        echo -n "Stopping $prog: "
	killproc -p $pidfile $prog
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
		rm -f $lockfile
		log_success_msg
	else
		log_failure_msg
	fi
        return $RETVAL
}

restart() {
        stop
	start
}

tryrestart() {
	[ -e $lockfile ] && restart
	return 0
}

reload() {
        echo -n "Reloading $prog: "
	log_warning_msg
	logger -t $prog "reloading configuration is currently an unimplemented LSB feature"
	return 3
}

forcereload() {
	reload
	restart
	return 0
}

status() {
        pid=`pidofproc -p ${pidfile} ${binary}`
        ret=$?
        if test "${ret}" = "0"
        then
                log_success_msg "$prog is running"
                return $ret
        elif test "${ret}" == "1"
        then
                log_warning_msg "$prog is dead and /var/run pid file exists"
        elif test "${ret}" == "2"
        then
                log_warning_msg "$prog is dead and /var/lock lock file exists"
        elif test "${ret}" == "3"
        then
                echo "$prog is not running"
        elif test "${ret}" == "4"
        then
                log_warning_msg "$prog or service status is unknown"
        fi
        return $ret
}

case "$1" in
  start)
	start
	RETVAL=$?
	;;
  stop)
	stop
	RETVAL=$?
	;;
  restart)
	restart
	RETVAL=$?
        ;;
  try-restart|condrestart)
	tryrestart
	RETVAL=$?
	;;
  reload)
	reload
	RETVAL=$?
        ;;
  force-reload)
	forcereload
	RETVAL=$?
        ;;
  status)
        status
	RETVAL=$?
        ;;
  *)
	echo "Usage: $0 {start|stop|restart|try-restart|reload|force-reload|status}"
	RETVAL=2
esac

exit $RETVAL
