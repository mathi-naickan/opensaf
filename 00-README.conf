Configuring OpenSAF
===================
NOTE: Upon installation of OpenSAF(through 'make install' or rpm install),
the $pkgsysconfdir/osafdir.conf (e.g. /etc/opensaf/osafdir.conf) shall contain
definitions of the directory paths where the OpenSAF packages are installed.

OpenSAF configuration files are located in the $pkgsysconfdir (e.g. /etc/opensaf)
directory. 

Steps to configure 'opensaf' user after 'make install'
======================================================
From 4.2 onwards, upon a 'make install' the following additional steps have 
to be done to configure OpenSAF processes to run as the UNIX system user "opensaf":

1) useradd -r -g opensaf -d /usr/local/share/opensaf/ -s /sbin/nologin -c "OpenSAF" opensaf
2) echo "opensaf ALL = NOPASSWD: /sbin/reboot, /sbin/tipc-config, /usr/bin/pkill" >> /etc/sudoers
3) echo 'Defaults:%opensaf !requiretty' >> /etc/sudoers
4) echo 'Defaults:opensaf !requiretty' >> /etc/sudoers
5) chown opensaf /var/lib/opensaf
6) chgrp opensaf /var/lib/opensaf
7) chown opensaf /var/run/opensaf
8) chgrp opensaf /var/run/opensaf
9) chown -R opensaf /var/log/opensaf
10) chgrp -R opensaf /var/log/opensaf

Following is the brief description of each such configuration file.

*******************************************************************************
nid.conf

This file contains low level global configuration for OpenSAF. Normally this
file does not have to be changed unless:

- TIPC is controlled outside OpenSAF: change OPENSAF_MANAGE_TIPC to "no"

- TCP is selected as MDS transport: change MDS_TRANSPORT to "TCP"

- OpenSAF should run as a different UNIX group and user than the default 'opensaf'
group/user.
	If OpenSAF was built with the flags "CFLAGS=-DRUNASROOT", then
	change OPENSAF_GROUP and OPENSAF_USER to root i.e. for old (<4.2) behaviour.

	For any other user, change OPENSAF_GROUP and OPENSAF_USER accordingly
	after doing the following:

	If using RPMs, change the opensaf.spec.in file accordingly.
	More specifically the variables opensaf_user and opensaf_group at the 
	top of the RPM spec file.

	In the case of 'make install', do the steps listed in
	'Steps to configure opensaf user' above.

- Use of MDS subslot ID needs to be disabled, add TIPC_USE_SUBSLOT_ID=NO

*******************************************************************************
nodeinit.conf

This is the input file to the Node Initialization Daemon for serializing the
opensaf services startup.

NOTE: The interface name and network id arguments to the nid_tipc entry
in nodeinit.conf would get installed with default values. Please change this
accordingly to reflect your correct interface(s) and network-id information.

Example 1, single interface:
/usr/lib/opensaf/nid_tipc:TIPC:S:/usr/lib/opensaf/nid_tipc:4000::2:1:start eth0 1234:stop

Example 2, dual interfaces:
/usr/lib/opensaf/nid_tipc:TIPC:S:/usr/lib/opensaf/nid_tipc:4000::2:1:start eth0,eth1 1234:stop

In the above line, eth0 and eth1 refers to the interface information and 1234 
refers to a sample tipc network id. Please change them accordingly. This
tipc-network id should be the same across all system controllers and payloads
in that OpenSAF cluster. The Ethernet interfaces is a comma separated list as
shown in the example 2 or just the name of a single interface as in
example 1.

Please note that OpenSAF recommend users to run TIPC on two separate bearers
and let TIPC do the link aggregation. A bonded interface is not recommended.

Also see http://tipc.sourceforge.net/doc/tipc_2.0_users_guide.html

By default `make install' will install pre-configured for a controller node.
i.e. By default, `nodeinit.conf' is a softlink to nodeinit.conf.controller file.
On a payload node, the nodeinit.conf must be a softlink to
nodeinit.conf.payload upon a 'make install'. For e.g.:

    % cd $pkgsysconfdir (e.g. /etc/opensaf/)
    % ln -sf nodeinit.conf.payload nodeinit.conf

Please note that OpenSAF recommend users to run TIPC on two separate bearers
and let TIPC do the link aggregation.
A bonded interface is not recommended. However OpenSAF does not currently 
support managing two separate TIPC bearers. The missing support is logged in
ticket http://devel.opensaf.org/ticket/1948

Also see http://tipc.sourceforge.net/doc/tipc_2.0_users_guide.html

By default `make install' will install pre-configured for a controller node.
i.e. By default, `nodeinit.conf' is a softlink to nodeinit.conf.controller file.
On a payload node, the nodeinit.conf must be a softlink to
nodeinit.conf.payload upon a 'make install'. For e.g.:

    % cd $pkgsysconfdir (e.g. /etc/opensaf/)
    % ln -sf nodeinit.conf.payload nodeinit.conf

*******************************************************************************
slot_id

The slot_id shall specify a unique value that represents a physical slot
identifier for the node in a chassis environment. It is typically set to the
same as the TIPC node ID.

By default, the slot_id contains a value of 1. While configuring
a new/second node in the cluster, this must be set to a unique/different 
value - for e.g. a value of 2 as below:
    % echo 2 > $pkgsysconfdir/slot_id

*******************************************************************************
subslot_id

The subslot_id shall specify a unique value that represents a physical sub-slot
identifier for the node in a chassis environment. It is normally never changed
from what's installed.

*******************************************************************************
chassis_id

The chassis_id represents an identifier for the chassis (Distributed Computing
Environment) and should be set to an integer value. It is normally never changed
from what's installed.

*******************************************************************************
imm.xml

This is a generated file that contains the OpenSAF Information Model. It
contains the classes and configuration objects information of all OpenSAF
services.

By default based on the configuration options chosen, i.e. whether
a particular service is enabled or not, the imm.xml files of individual OpenSAF 
service are installed in $pkgimmxmldir 
(e.g. /usr/local/share/opensaf/immxml/services) directory.

Perform the following steps to generate the final/combined imm.xml. (Also
refer to the readme in $pkgimmxmldir (e.g. /usr/share/opensaf/immxml/) directory.

% cd $(pkgimmxmldir) 

1) Generate a config file (nodes.cfg) for a 5 node cluster:

% sudo ./immxml-clustersize -s 2 -p 3

2) Edit nodes.cfg

The third column in nodes.cfg should be edited to match the short form of the
hostname (as shown by 'hostname -s') for each host.

3) Generate the imm.xml

% sudo ./immxml-configure

4) Copy the generated imm.xml file to the standard OpenSAF configuration directory.

For eg:
% sudo cp imm.xml.20100217_2201 /etc/opensaf/imm.xml

If the initial imm.xml is to be merged with some other file fragments the 
'immxml-merge' tool is used as shown below:

% cd /usr/share/opensaf/immxml
% sudo ./immxml-merge imm.xml.20100217_2201 my.xml > merged.xml
% sudo cp merged.xml /etc/opensaf/imm.xml

*******************************************************************************
node_name

This file is generated with the short form of the hostname ('hostname -s') when
the controller or payload rpm is installed.

The node_name file contains the RDN value of the CLM node name. A user can 
change the default value but the changed value 'must match' with the value 
specified in the nodes.cfg that was used to generate the imm.xml.i.e. the 
node_name value should match the value present in the generated imm.xml.

The node_name must be set to a unique value(as described above) for each node. 

*******************************************************************************
node_type

This file is generated when the controller or payload rpm is installed and
contains the associated node type name "controller" or "payload". If
'make install' is used, this file will always contain "controller".

This is a read-only configuration file that never should be edited.

*******************************************************************************
Per process config file

Every OpenSAF process has its own configuration file for the purpose of
controlling low level features such as tracing, location of configuration 
directories etc. Two files are worth mentioning since they probably needs
editing for at least a real deployment. For test and single node install
they work out of the box.

immnd.conf

This file is special since it contains many very important configuration
settings for the IMM service. See the immnd.conf file, the immsv README and the
IMM PR document for more information.

logd.conf

This file is worth mentioning since it contains the location of a
potentially shared between controllers directory where the LOG service stores
the generated log files.

*******************************************************************************
/etc/plmcd.conf

The plmcd.conf file has to be edited as below 'when PLM is enabled'.

The following entries have to be modified accordingly:

[ee_id]
0020f

The ee_id field should contain the DN name of the EE hosting the OpenSAF controller
as specified by the SaPlmEE object.

For eg:-
IF the DN name of the EE object in the imm.xml is set to
...        <object class="SaPlmEE">
...                <dn>safEE=SC-1,safDomain=domain_1</dn>

THEN, the [ee_id] field should be set to 
[ee_id]
safEE=SC-1,safDomain=domain_1

Note: Here SC-1 is the default value specified in the nodes.cfg file while generating
the imm.xml

[controller_1_ip]
10.105.1.3

[controller_2_ip]
10.105.1.6

The controller_1_ip and controller_2_ip fields shall contain the IP Addresses
of the peer controllers.

[os_type]
This is a description of the OS. Currently it needs to follow 
# the following syntax, 1;os;Fedora;2.6.31, where 
# 1 => Version
# os => Product
# Fedora => Vendor
# 2.6.31 => Release
# Note that Version is mandatory while the other fields can be empty

The [os_type] field should match with the values contained
in the imm.xml for that EE.
It shall contain the attribute values of the SaPlmEEBaseType 
and SaPlmEEType objects, each separated by Semi-Colons.

For eg:-
IF The following is the version of the EE in the default imm.xml,
        <object class="SaPlmEEType">
                <dn>safVersion=1,safEEType=Linux_os</dn>

AND, the following is configured in the default imm.xml,

        <object class="SaPlmEEBaseType">
                <dn>safEEType=Linux_os</dn>
                <attr>
                        <name>saPlmEetProduct</name>
                        <value>os</value>
                </attr>
                <attr>
                        <name>saPlmEetVendor</name>
                        <value>SUSE</value>
                </attr>
                <attr>
                        <name>saPlmEetRelease</name>
                        <value>2.6</value>
                </attr>
        </object>

THEN, the [os_type] field shall be set to the following value:
[os_type]
1;os;SUSE;2.6

*******************************************************************************

Priorities of OpenSAF threads:
==============================
The following list contains the default priority values of OpenSAF threads and 
the corresponding environment variables could be used to specify them:

Note: The following are default values that are tested and supported by OpenSAF.
A system integrator/designer may choose to fine-tune these values upon their own
discretion(and as such are not for playing around).

Thread Name            Environment variable                Default settings
===============================================================================
MDS Agent              OSAF_MDS_SCHED_PRIORITY              85
                       OSAF_MDS_SCHED_POLICY                2 (SCHED_RR)
MDS Timer              OSAF_TMR_SCHED_PRIORITY              85
                       OSAF_TMR_SCHED_POLICY                2 (SCHED_RR)
DTM                    OSAF_DTM_INTRANODE_SCHED_PRIORITY    85
                       OSAF_DTM_INTRANODE_SCHED_POLICY      2 (SCHED_RR)
                       OSAF_NODE_DISCOVERY_SCHED_PRIORITY   85
                       OSAF_NODE_DISCOVERY_SCHED_POLICY	    2 (SCHED_RR)
RDE Agent              OSAF_RDA_SCHED_PRIORITY              0
                       OSAF_RDA_SCHED_POLICY                0 (SCHED_OTHER)
MQSV Agent             OSAF_MQA_SCHED_PRIORITY              0
                       OSAF_MQA_SCHED_POLICY                0 (SCHED_OTHER) 
                       OSAF_MQA_CLBK_SCHED_PRIORITY         0
                       OSAF_MQA_CLBK_SCHED_POLICY           0 (SCHED_OTHER) 
Module Execution       OSAF_EXEC_MOD_SCHED_PRIORITY         0
                       OSAF_EXEC_MOD_SCHED_POLICY           0 (SCHED_OTHER) 
AMFND Monitoring       OSAF_AVND_MON_SCHED_PRIORITY         0
                       OSAF_AVND_MON_SCHED_POLICY           0 (SCHED_OTHER) 
SMF Campaign           OSAF_SMF_CAMP_SCHED_PRIORITY         0
                       OSAF_SMF_CAMP_SCHED_POLICY           0 (SCHED_OTHER) 
SMF Upgrade Procedure  OSAF_SMF_UPGRADE_PROC_SCHED_PRIORITY 0
                       OSAF_SMF_UPGRADE_PROC_SCHED_POLICY   0 (SCHED_OTHER) 
SMF Procedure          OSAF_SMF_PROC_SCHED_PRIORITY         0
                       OSAF_SMF_PROC_SCHED_POLICY           0 (SCHED_OTHER) 

Priorities of OpenSAF Processes:
================================
The following list contains the default priority values of OpenSAF processes
and the corresponding environment variables could be used to specify them:

Process Name          Environment variable          Default settings
===============================================================================
AMF Node Director     OSAFAMFND_SCHED_PRIORITY      1
                      OSAFAMFND_SCHED_POLICY        2 (SCHED_RR) 
AMF WatchDog          OSAFAMFWD_SCHED_PRIORITY      1
                      OSAFAMFWD_SCHED_POLICY        2 (SCHED_RR) 
AMF Director          OSAFAMFD_SCHED_PRIORITY       0
                      OSAFAMFD_SCHED_POLICY         0 (SCHED_OTHER) 
RDE Director          OSAFRDED_SCHED_PRIORITY       0
                      OSAFRDED_SCHED_POLICY         0 (SCHED_OTHER) 
FM Director           OSAFFMD_SCHED_PRIORITY        0
                      OSAFFMD_SCHED_POLICY          0 (SCHED_OTHER)  
IMM Director          OSAFIMMD_SCHED_PRIORITY       0
                      OSAFIMMD_SCHED_POLICY         0 (SCHED_OTHER)  
IMM Node Director     OSAFIMMND_SCHED_PRIORITY      0
                      OSAFIMMND_SCHED_POLICY        0 (SCHED_OTHER)  
LOG Director          OSAFLOGD_SCHED_PRIORITY       0
                      OSAFLOGD_SCHED_POLICY         0 (SCHED_OTHER)  
NTF Director          OSAFNTFD_SCHED_PRIORITY       0
                      OSAFNTFD_SCHED_POLICY         0 (SCHED_OTHER)  
CLM Director          OSAFCLMD_SCHED_PRIORITY       0
                      OSAFCLMD_SCHED_POLICY         0 (SCHED_OTHER)  
SMF Director          OSAFSMFD_SCHED_PRIORITY       0
                      OSAFSMFD_SCHED_POLICY         0 (SCHED_OTHER)  
SMF Node Director     OSAFSMFND_SCHED_PRIORITY      0
                      OSAFSMFND_SCHED_POLICY        0 (SCHED_OTHER)  
MQSv Director         OSAFMSGD_SCHED_PRIORITY       0
                      OSAFMSGD_SCHED_POLICY         0 (SCHED_OTHER)  
MQSv Node Director    OSAFMSGND_SCHED_PRIORITY      0
                      OSAFMSGND_SCHED_POLICY        0 (SCHED_OTHER)  
LCK  Director         OSAFLCKD_SCHED_PRIORITY       0
                      OSAFLCKD_SCHED_POLICY         0 (SCHED_OTHER)  
LCK  Node Director    OSAFLCKND_SCHED_PRIORITY      0
                      OSAFLCKND_SCHED_POLICY        0 (SCHED_OTHER)  
CKPT Director         OSAFCKPTD_SCHED_PRIORITY      0
                      OSAFCKPTD_SCHED_POLICY        0 (SCHED_OTHER)  
CKPT Node Director    OSAFCKPTND_SCHED_PRIORITY     0
                      OSAFCKPTND_SCHED_POLICY       0 (SCHED_OTHER)  
EDS  Director         OSAFEVTD_SCHED_PRIORITY       0
                      OSAFEVTD_SCHED_POLICY         0 (SCHED_OTHER)  


Setting resource limits for user applications running as 'non root' user
=========================================================================
One MDS thread exists(in the application context) when applications use
OpenSAF services' APIs. By default, this MDS thread is required to
run with a real time priority (see OSAF_MDS_SCHED_PRIORITY above).

From OpenSAF 4.2 onwards, applications that do not run with 'root' privileges
are expected to configure the resource limits for their application processes
such that the MDS thread is able to set realtime priority for itself.
i.e. Users have to setup RLIMIT_RTPRIO using setrlimit() or may configure
'rtprio' in the /etc/security/limits.conf for their applications.

Note: If resource limits are not configured as above then the MDS thread
(running in application context) will by default have/set a non-realtime 
priority with the scheduling policy of SCHED_OTHER.


