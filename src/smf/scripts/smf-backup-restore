#!/bin/sh
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2010 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
# Default implementation of SMF backup-restore



# This script is called to restore a previously created backup.  This
# script is executed on an SC and must restore local backups on all
# nodes.
#
# For this we require some remote shell and a remote copy program.
# These are defined by the $RSH and $RCP variables, or "rsh" and "rcp"
# are used by default.

# Only applications will be restored. The cluster MUST be rebooted
# after the restore!

# It seems to be undefined what a "backup" is and where it is stored,
# so in this example we make these assumptions;
#
#  - A "backup" is a compressed (gzip) tar-file.
#  - Backup files are stored in a directory defined by the $SMF_BACKUP_DIR
#    variable.

# The final backup tar-file contains the IMM dump and the local
# backups from all (reachable) nodes. Example;
#
#   # tar xzvf TEST_BACKUP.tgz 
#   imm.xml
#   PL_2_3_backup.tgz
#   SC_2_1_backup.tgz
#   SC_2_2_backup.tgz
#
# The local backups will be copied to the corresponding node and will
# be restored locally. The saved imm.xml is restored.

# The local backup-files contains the bundle-directories in the
# $SMFREPOSITORY and the off/on-line remove and install scripts for all
# bundles installed on that particular node.  The local backup-files
# will also contain the directory "tmp/bundles" that holds a data-file
# for each saved bundle. Example;
#
#   # tar tf SC_2_1_backup.tgz
#   tmp/
#   tmp/bundles/
#   tmp/bundles/bundleA
#   opt/opensaf/bundleA/
#   opt/opensaf/bundleA/ETF.xml
#   hostfs/online_remove.sh
#   hostfs/offline_remove.sh
#   hostfs/online_install.sh
#   hostfs/offline_install.sh
#
# In this example the local backup contains one single bundle (bundleA)
# containing only an ETF file. (SMFREPOSITORY=/opt/opensaf)
#

# On restore the local backup-file is unpacked on root (/). The
# /tmp/bundles directory is scanned for bundles. The bundle
# information files contains off-line install information. Exmaple;
#
#   # cat /tmp/bundles/bundleA
#   saSmfBundleInstallOfflineCmdUri=/hostfs/offline_install.sh
#   saSmfBundleInstallOfflineCmdArgs=bundleA
#
# The bundles are restored by calling their offline install scripts like;
#
#   /hostfs/offline_install.sh bundleA
#
# It is the responsibility of the bundle creator to make sure that the
# bundle can be properly restored with this script. THIS IS NOT
# IN THE SAF STANDARD! It is just a way used in this example. 



rsh=${RSH:-rsh}
rcp=${RCP:-rcp}
tar=${TAR:-tar}
TMP=${TMP:-/tmp}

myself=$0
prg=`basename $0`
tmp=$TMP/${prg}$$
localtag=SMF_LOCAL_RESTORE

die() {
    echo "ERROR: $@" >&2
    logger -t $prg -p user.err "ERROR ($cmd): $@"
    rm -rf $tmp
    exit 1
}
log() {
    echo "$@"
    logger -t $prg -p user.debug "$@"
}

trap "die Interrupted" INT TERM
mkdir -p $tmp

x=$(which $rsh) || die "Not found [$rsh]"
test -x $x || die "Not executable [$x]"
x=$(which $rcp) || die "Not found [$rcp]"
test -x $x || die "Not executable [$x]"
test -n "$1" || die "Identifier must be given"
test -n "$SMFREPOSITORY" || die 'Not defined $SMFREPOSITORY'
test -d "$SMFREPOSITORY" || die "Not a directory [$SMFREPOSITORY]"

local_restore() {
    f=$TMP/$(hostname)_backup.tgz
    test -r $f || die "Not readable [$f]"
    cd /
    rm -rf $TMP/bundles
    tar xzf $f || die "Restore files failed"
    for n in $(find $TMP/bundles -type f); do
	b=$(basename $n)
	log "Restoring bundle [$b] on $(hostname)"
	eval $(sed -e 's,<Empty>,,' < $n)
	if test -z "$saSmfBundleInstallOfflineCmdUri"; then
	    log "No offline-install found for bundle [$b]"
	else
	    if ! test -x $saSmfBundleInstallOfflineCmdUri; then
		log "Not executable [$saSmfBundleInstallOfflineCmdUri]"
	    else
		cmd="$saSmfBundleInstallOfflineCmdUri $saSmfBundleInstallOfflineCmdArgs"
		$cmd || die "Failed [$cmd]"
	    fi
	fi
    done
    rm -rf $TMP/bundles $f
    return 0
}


# Check for local execution
if test "$1" = "$localtag"; then
    local_restore
    rm -rf $tmp
    exit 0
fi


# --- This it the central backup ---
log "Performing SMF restore actions, Identifier = $1"

# Check target backup-file
test -n "$SMF_BACKUP_DIR" || die 'Undefined $SMF_BACKUP_DIR'
test -d "$SMF_BACKUP_DIR" ||  die "Not a directory [$SMF_BACKUP_DIR]"
backup_tar=$SMF_BACKUP_DIR/$1.tgz
test -r $backup_tar || die "Not readable [$backup_tar]"

# Unpack the backup tar-file
cd $tmp
$tar xzf $backup_tar

# Execute a local restore on all nodes.
for f in $(find . -name "*_backup.tgz"); do
    n=$(echo $f | sed -e 's,^\./,,' -e 's,_backup.tgz,,')
    if ! $rcp $myself $n:$TMP > /dev/null 2>&1; then
	log "Node [$n] unreachable. Skipped..."
	continue
    fi
    $rcp $f $n:$TMP
    $rsh $n "SMFREPOSITORY=$SMFREPOSITORY $TMP/$prg $localtag" ||\
	die "Local restore failed on node [$n]"
done

# Restore the IMM contents
cp $tmp/imm.xml /etc/opensaf || die "Restore imm.xml failed"

cd /
rm -rf $tmp
exit 0





