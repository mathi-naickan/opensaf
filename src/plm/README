#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2010 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Emerson Network Power
#

CONTENTS:
--------
	* GENERAL 
	* DEPENDENCIES
	* DIRECTORY STRUCTURE
	* BUILD PROCEDURE
	* RUNNING OPENSAF WITH PLMSv
	* TEST CODE
	* CONFIGURATION
		* PLMC Configuration on an EE
	* DEBUG
	* IMPLEMENTATION NOTES
	* TO DO

GENERAL
-------

This directory (services/plmsv) contains an implementation of the SAF-AIS-PLM
service version A.01.02.

Application programmers intending to interface with plmsv should primarily read
SAI-AIS-PLM-A.01.02 specification.

The OpenSAF Platform Managerment Service (PLMSv) is the core service of the 
OpenSAF software. It provides a logical view of the hardware and low-level 
software of the system. This logical view is presented in the Service 
Availability(TM) Forum Information Model by a set of objects that
	* allow for the management of hardware entities and execution 
	  environments,
	* allow other software to keep track of status changes of the hardware 
	  and execution environments, and
	* allow the mapping of the HPI data to objects represented in the SA 
	  Forum Information Model.

Platform Management Service is made up of the following sub-parts
	* Platform Management Server (PLMS)
		* HPI Request Broker (HRB)
		* HPI Session Manager (HSM)
	* Platform Management Coordinator (PLMC)
	* Platform Management Agent (PLMA)

The OpenSAF implementation of PLMSv provides the following functionality:

* Represent hardware with a containment tree of HE objects in SAF IMM model
* Discover and manage hot swap state information of the HE objects interfacing 
  with HPI
* Check, Match and verify the discovered hardware entities with the configured 
  HE objects.
* Manage all the state information of HE objects defined by PLM state model ( 
  Presence, Administrative, Operational, Readiness states and Readiness flags )
* Allow Administrative operations on hardware at granularity of HE Objects.
* Implement and support all kinds of dependencies 
	* On-the-parent  dependency 
	* One-on-one dependency
	* One-of-a-group dependency
	* All-of-a-group dependency
	* N-of-a-group dependency
* Model EE directly running on an HE as child of the HE in containment tree 
  using SAF IMM model.
* Manage all the state information of EE objects defined by PLM state model ( 
  Presence, Administrative, Operational, Readiness states and Readiness flags)
* Support Administrative operation on EEs.
* Fault Isolation of HEs and EEs. ( EEs that are directly hosted on HE)
* Implement Library Life Cycle API as per specification
* Implement Entity Group Management, Readiness Status Tracking and Readiness 
  Impact PLM operations.
* Generate PLM state change notifications and HPI events notifications using 
  SAF Notification Service
* Generate HE and EE Alarms for hardware faults (only physical extractions and 
  isolated faults) and unmapped HE Alarms using SAF Notification service.
* Support ATCA mapping and the following hotswap models
	* TWO_HOTSWAP_MODEL
	* THREE_HOTSWAP_MODEL
	* PARTRIAL_FIVE_HOTSWAP_MODEL
	* FULL_FIVE_HOTSWAP_MODEL


DEPENDENCIES
------------

PLMSv depends on the below OpenSAF services
	* MDS
	* IMMSv 
	* NTFSv
	* LOGTRACE
	* MBCSv
	* NID
	* AMF

The following are the libraries that PLM Agent library depends on
libopensaf_core.so
libplmsv_common.so


DIRECTORY STRUCTURE
-------------------

Agent code can be found in 
osaf/libs/agents/saf/plma
osaf/libs/common/plmsv ( common to agent and server )
 
Include files are located under
osaf/libs/saf/include
osaf/libs/common/plmsv/include
 
PLMC code 
contrib/plmc
 
PLMS code
osaf/libs/common/plmsv/plms
osaf/services/saf/plmsv/plms
osaf/libs/common/plmsv 
 
config files under
osaf/services/saf/plmsv/config

BUILD PROCEDURE
---------------

plmsv is integrated into opensaf build framework. In controller builds plmsv 
make is enabled by default. If plmsv builds have to be disabled please use 
configure option --disable-ais-plm. 

PLMSv does management of hardware entities and for this plmsv interfaces with 
HPI. Normally, the path to OpenHPI headers and libraries will be found
automatically by the configure script, using the pkg-config tool. If you need
to build and link against custom HPI headers and libraries that pkg-config
does not know about, you may use the HPI_LIBS and HPI_CFLAGS variables, either
exported in your environment or passed as options to the configure script. For
example, 

 sh bootstrap.sh # (only if building from a repository checkout)
 ./configure --enable-hpi --with-openhpi --with-hpi-interface=B03 \
   HPI_CFLAGS="-I/path/to/openhpi/headers" \
   HPI_LIBS="-L/path/to/openhpi/lib -lopenhpimarshal -lopenhpiutils -lopenhpi"

PLMSv also does management of virtualized EEs, and for this plmsv interfaces
with libvirt. Normally, the path to libvirt headers and libraries will be found
automatically by the configure script, using the pkg-config tool. If you need
to build and link against custom libvirt headers and libraries that pkg-config
does not know about, you may use the LIBVIRT_LIBS and LIBVIRT_CFLAGS variables,
either exported in your environment or passed as options to the configure
script.

RUNNING OPENSAF WITH PLMSv
--------------------------
Currently there is a dependency on the environment variable LD_LIBRARY_PATH 
for picking HPI libraries during plmsv startup.
Please export this variable to the location of the implementation specific HPI 
libraries installed on the target before starting opensaf.

TEST CODE
---------

Sample test code can be found in directory tests/plmsv/plms.
Invoke make command
Please find the built executable plmtest. 
Please note that this has dependency on opensaf core, libSaPlm.so and 
plms_common.so libraries.
Run the plmtest executable using example command ./plmtest 3 1 
    where 3 is test suite and 1 is test number in that suite.


CONFIGURATION
-------------

PLMSv does management of hardware entities and for this plmsv interfaces with 
HPI.  If plmsv need to run on systems which do not have HPI support, plmsv can 
be configured to run with non-HPI support. To configure appropriately set value
( 1=enable; 0=disable) for attribute "isHpiSupported" in object of the class 
"SaHpiConfig" in imm.xml 

Sample IMM configuration files for PC, ATCA and HP c-Class platforms can be 
found in the config directory of plmsv.

PLMC Configuration on an EE
---------------------------

plmc_boot and plmc_d are two binaries that coordinates plmsv service on EE. 
plmc_boot and plmc_main are the RC init scripts for starting the plmc_boot and 
PLMc daemon.

The above executables when started reads the plmcd.conf file and below is the 
sample configuration for an EE.

If the EE configuration in imm.xml is as below
        <object class="SaPlmEEBaseType">
                <dn>safEEType=Linux_os</dn>
                <attr>
                        <name>saPlmEetProduct</name>
                        <value>Linux</value>
                </attr>
                <attr>
                        <name>saPlmEetVendor</name>
                        <value>SUSE</value>
                </attr>
                <attr>
                        <name>saPlmEetRelease</name>
                        <value>2.6</value>
                </attr>
        </object>

        <object class="SaPlmEEType">
                <dn>safVersion=1,safEEType=Linux_os</dn>
                <attr>
                        <name>saPlmEetDefInstantiateTimeout</name>
                        <value>1000000</value>
                </attr>
                <attr>
                        <name>saPlmEetDefTerminateTimeout</name>
                        <value>1000000</value>
                </attr>
        </object>
 
	<object class="SaPlmEE">
                <dn>safEE=clm_payload_node_3,safDomain=domain_1</dn>
                <attr>
                        <name>saPlmEEType</name>
                        <value>safVersion=1,safEEType=Linux_os</value>
                </attr>
                <attr>
                        <name>saPlmEEInstantiateTimeout</name>
                        <value>180000000000</value>
                </attr>
                <attr>
                        <name>saPlmEETerminateTimeout</name>
                        <value>180000000000</value>
                </attr>
    	</object>
    
	
Then the corresponding configuration of plmc is as below
	[ee_id]
	safEE=clm_payload_node_3,safDomain=domain_1

	[plmc_msg_protocol_version]
	1.0

	[controller_1_ip]
	10.105.1.3

	[controller_2_ip]
	10.105.1.6

	[services]
	/etc/init.d/snmpd
	/etc/init.d/openhpid

	[osaf]
	/etc/init.d/opensafd

	[tcp_plms_listening_port]
	6868

	[udp_broadcast_port]
	6869

	[os_type]
	1;Linux;SUSE;2.6

	[plmc_cmd_timeout_secs]
	180

	[os_reboot_cmd]
	/sbin/reboot

	[os_shutdown_cmd]
	/sbin/shutdown -h 0

	[so_keepalive]
	1

	[tcp_keepidle_time]
	2

	[tcp_keepalive_intvl]
	1

	[tcp_keepalive_probes]
	2

Please note that os_type in plmcd.conf directly corresponds to what is specified
for object class="SaPlmEEBaseType" in imm.xml. 

In the above example the os_type is filled as 1;os;SUSE;2.6 
This information corresponds to values of attributes 
	safVersion
	saPlmEetProduct
	saPlmEetVendor
	saPlmEetRelease 
in the same order with a delimiter ';' ( semi-colon). 

If optional verification attributes are not configured, then verification of
those fields will be skipped.
Please make sure that you get the empty configuration for optional attributes 
but still provide a delimiter. 

for example:
   1;Linux;;   	-  version is "1", Product is "Linux", vendor is NULL and 
		   Release is NULL
   ;Linux;SUSE; -  version is NULL, Product is "Linux", vendor is "SUSE" and 
		   Release is NULL
   ;;; 		-  All attributes are NULL configured.


Please read README in plmc directory for further details. 


PLM and VIRTUALIZATION
----------------------
PLM also supports virtualization of EEs using libvirt. To use virtualization
support in PLM, you will need to do the following:

1) Configure access to the hypervisor. This is done by adding an XML object of
   type OpenSafPlmVirtualMachineMonitorConfig. "saPlmEE" should point to the EE
   you have defined elsewhere for the hypervisor, and "libVirtSession" should
   be the URI libvirt should use to connect to the hypervisor. For KVM, this
   should be something like "qemu+<transport>://<hostname>/system". Please see
   the libvirt documentation for your connection specifics.

        <object class="OpenSafPlmVirtualMachineMonitorConfig">
                <dn>plmVmmConfig=1,safApp=safPlmService</dn>
                <attr>
                        <name>saPlmEE</name>
                        <value>safEE=VirtualMachineMonitor,safHE=myHardwareHE,safDomain=mySafDomain</value>
                </attr>
                <attr>
                        <name>libVirtSession</name>
                        <value>qemu:///system</value>
                </attr>
        </object>

2) Map the virtual machine EE to the libvirt domain name. This is done by adding
   an XML object of type OpenSafPlmVirtualMachineConfig. "saPlmEE" should point
   to the EE you have defined elsewhere for the virtual machine, and
   "libVirtDomainName" should point to the libvirt name of the domain.

        <object class="OpenSafPlmVirtualMachineConfig">
                <dn>plmVmConfig=1,safApp=safPlmService</dn>
                <attr>
                        <name>saPlmEE</name>
                        <value>safEE=VirtualMachine1,safEE=VirtualMachineMonitor,safHE=myHardwareHE,safDomain=mySafDomain</value>
                </attr>
                <attr>
                        <name>libVirtDomainName</name>
                        <value>EE_test_1</value>
                </attr>
        </object>

3) libvirtd must be started in some fashion.


IMPLEMENTATION NOTES
---------------------

* PLMSv interfaces with IMMSv A.02.01 APIs and callbacks.
* If optional verification attributes are not configured, then verification of
  those fields will be skipped.


TO DO
-----

* Make plmsv dynamically load HPI libraries so that the libraries are not needed
  on target running OpenSAF with no HPI support.
* To eliminate use of EDU routines for encode and decode of plmsv messages
