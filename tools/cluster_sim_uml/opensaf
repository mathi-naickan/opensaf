#! /bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008-2012 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#

# UML System startup script

die() {
	echo "ERROR: $*"
	exit 1
}

test -f "$PWD/$0" || die 'Must execute $0 from directory where it is located'
export CLUSTER_SIM_UML_DIR=$PWD
export PATH=${PWD}/uml/bin:${PATH}
test -d ./rootfs || die "No shadow root at [./root]"

UML_DIR=$CLUSTER_SIM_UML_DIR/uml
REPL_DIR=repl-opensaf
test -x $UML_DIR/bin/uml_start || die "Not executable [$UML_DIR/bin/uml_start]"

NUMNODES=${2:-5}
IPADDRBASE=${IPADDRBASE:-192.168.0}
PIDFILEDIR=/tmp/${USER}_opensaf
uid=`id -u`

cluster_start() {
	numnodes=$1
	x=5
	y=5
	dy=340

	echo "Starting opensaf services"

	# Clean-up
	rm -rf $PIDFILEDIR
	mkdir $PIDFILEDIR

	if ! test -d $CLUSTER_SIM_UML_DIR/$REPL_DIR; then
		mkdir -p $CLUSTER_SIM_UML_DIR/$REPL_DIR/immsv_store
		cp  rootfs/etc/opensaf/imm.xml \
			$CLUSTER_SIM_UML_DIR/$REPL_DIR/immsv_store/imm.xml
	fi

	# Create /etc/hosts file
	echo "127.0.0.1       localhost" > rootfs/etc/hosts

	# Start network if necessary
	if ! pgrep -U $uid uml_switch > /dev/null; then
		rm -f /tmp/uml-${uid}.ctl
		xterm -iconic -geometry 60x8-0+110 \
			-T UML-network -e $UML_DIR/bin/uml_switch -unix /tmp/uml-${uid}.ctl $tap &
		echo $! > $PIDFILEDIR/uml_switch
		while [ ! -S /tmp/uml-${uid}.ctl ]; do
			sleep 1
		done
	fi

	# Start the processors
	node_name_prefix=SC-
	rootdir=rootfs
	for ((p=1; p <= $numnodes; p++)); do
		# First two nodes are system controllers, the rest are payloads
		if ((p == 3)); then
			x=660
			y=5
			node_name_prefix=PL-
		fi
		hostname=$node_name_prefix$p
		xterm -hold -geometry 140x20+$x+$y -T $hostname -e \
			$UML_DIR/bin/uml_start $p umid=$hostname mem=128M hostname=$hostname shadowroot=$rootdir $$ &
		echo $! > $PIDFILEDIR/$hostname
		y=$((y+dy))

		# Append host to /etc/hosts file
		echo "$IPADDRBASE.$p       $hostname.opensaf.org  $hostname" >> rootfs/etc/hosts
	done
}

cluster_stop() {
	echo "Stopping opensaf services"
	nodes=`ls $HOME/.uml`
	for node in $nodes; do
		$UML_DIR/bin/uml_mconsole $node halt > /dev/null 2>&1
		sleep 1
		rm -rf $HOME/.uml/$node
	done
	if [ -d $PIDFILEDIR ]; then
		pidfiles=$(ls $PIDFILEDIR)
		for pidfile in $pidfiles; do
			kill -9 $(cat $PIDFILEDIR/$pidfile) > /dev/null 2>&1
		done
		rm -rf $PIDFILEDIR
	fi
	rm -f /tmp/uml-${uid}.ctl
}

delete_persistent_store() {
	echo "Deleting persistent store contents"
	rm -rf $CLUSTER_SIM_UML_DIR/rootfs/var/*
	rm -rf $CLUSTER_SIM_UML_DIR/$REPL_DIR
}

# Start a single node, referenced by number
node_start() {
	node=$1

	test -d $PIDFILEDIR || mkdir -p $PIDFILEDIR

	# Start network if necessary
	if ! pgrep -U $uid uml_switch > /dev/null; then
		rm -f /tmp/uml-${uid}.ctl
		xterm -iconic -geometry 60x8-0+110 \
			-T UML-network -e $UML_DIR/bin/uml_switch -unix /tmp/uml-${uid}.ctl $tap &
		echo $! > $PIDFILEDIR/uml_switch
		while [ ! -S /tmp/uml-${uid}.ctl ]; do
			sleep 1
		done
	fi

	if ! stat "rootfs/etc/hosts" &> /dev/null; then
		echo "127.0.0.1       localhost" > rootfs/etc/hosts
	fi

	echo "Starting node $node"

	rootdir=rootfs
	p=$node

	if ((p < 3)); then
		node_name_prefix=SC-
	else
		node_name_prefix=PL-
	fi

	hostname=$node_name_prefix$p

	# start the uml vm in its own xterm
	xterm -hold -geometry 140x20 -T $hostname -e \
		$UML_DIR/bin/uml_start $p umid=$hostname mem=128M hostname=$hostname shadowroot=$rootdir $$ &
	echo $! > $PIDFILEDIR/$hostname

	# Append host to /etc/hosts file
	echo "$IPADDRBASE.$p       $hostname.opensaf.org  $hostname" >> rootfs/etc/hosts
}

# Stop a single node, referenced by number
node_stop() {
	if [ $1 -lt 3 ]; then
		node="SC-$1"
	else
		node="PL-$1"
	fi

	if ls $HOME/.uml/$node/pid &> /dev/null; then
		echo "Stopping node $node"
	else
		die "Node $1 is not started"
	fi

	# halt the uml vm
	$UML_DIR/bin/uml_mconsole $node halt > /dev/null 2>&1
	sleep 1
	rm -rf $HOME/.uml/$node

	# kill the xterm
	kill -9 $(cat $PIDFILEDIR/$node) > /dev/null 2>&1
	rm $PIDFILEDIR/$node
}

case "$1" in
	start)
		cluster_stop
		cluster_start $NUMNODES
		;;
	stop)
		cluster_stop
		;;
	nodestart)
		test $# -eq 2 || die "wrong number of arguments"
		node_start $2
		;;
	nodestop)
		test $# -eq 2 || die "wrong number of arguments"
		node_stop $2
		;;
	clean)
		delete_persistent_store
		;;
	*)
		echo "Usage: $0 {start [numnodes] | stop | nodestart <number> | nodestop <number> | clean}"
		exit 1
	
esac
exit 0
