Commit Message Format
=====================

The patch review process heavily relies on properly formatted commit message.
This section will describe how commit message should be formatted and the
relation it has with the patch review process by email.

A commit message should comply to the following template:

* First line  : 80-chars long one line short description (#ticket). Describe what
                the patch is doing logically (not the bug description)
* Second line : Blank
* Third line+ : 80-chars long lines for a more complete description

-----<-----<-----<-----<-----<-----
example: this is a one line short description (#2000)

This is a more elaborate description that explains your changes and the
original problem and how it got solved.

 * Blah
 * Blah

Signed-off-by: John Doe <john.doe@example.com>
-----<-----<-----<-----<-----<-----

The first line will be grabbed by the 'hg email' command and added as the
subject of the patch, hence the why it should be short and precise. Note that it
also contains the "area/module/feature" of the changes (i.e. example:). If you
have trouble identifying the unique nature of the patch, your patch is probably
way to long and should be divided in a series.

The Ticket # in a future integration will be used on the Trac web interface to
correlate tickets and commits. It will also be used by Mercurial hooks to
close/fix tickets automatically if needed.

The long description gives more details about the patch/changeset.

The SOB tag is the original patch author.


Default Commit Message Template
===============================

Apparently Mercurial lacks the support of customizing the default commit message
based on a template file somewhere in the repository.

The Qct extension can be installed and used in your ~/.hgrc profile to point to
a template file, so that you're nagged every time how to fill the commit
message properly ;)

For instance under Red Hat/Fedora the package is called 'qct-mercurial'

   % yum install qct-mercurial
   % yum install qct

http://www.selenic.com/mercurial/wiki/index.cgi/QctExtension

Under './tools/devel/review/commit.template', you'll find a default template that you
can use with the Qct extension. The extension automatically looks for a template
file under `hg root`/.commit.template, a copy is already placed in the OpenSAF
repository for developer that would like to use the Qct extension.

-----<-----<-----<-----<-----<-----
[extensions]
hgext.qct =

[qct]
signoff = Signed-off-by: John Doe <john.doe@example.com>
-----<-----<-----<-----<-----<-----

To use the Qct Extension, you'll have to commit your changes using the 'hg
commit-tool | hg qct' command. The tool has neat features, like dynamically
deciding which files will be part of the current commit etc. But it might bug
some developers since it pops up a GUI.


Mercurial Settings Needed for Email Review
==========================================

This section lists the settings that should be enabled from the '~/.hgrc' file to
be able to use the helper script properly.

The following options should be set in ~/.hgrc:

-----<-----<-----<-----<-----<-----
[ui]
username = John Doe <john.doe@example.com>

[extensions]
hgext.mq =
hgext.patchbomb =

[email]
method = smtp
from = John Doe <john.doe@example.com>

[smtp]
host = smtp.example.com

[diff]
git=1
nodates=1
showfunc=1
-----<-----<-----<-----<-----<-----

git-like diff should preferred to hg-like diff. There's known issues
interpreting hg-like diff formatted patch with new file mode and deleted file
mode.

nodates and showfunc gives cleaner patch context.


Using the submit-review.sh Helper Script
========================================

Present in './tools/devel/review/submit-review.sh', this script will help developer to
easily submit work for review in well formatted patch series as seen on major
open source project mailing lists.

For now, the script supports two workflows:

   * Submit review based on a range of locally committed changesets
   * Submit review based on a patch queue (MQ)
   * Submit review based on all outgoing changesets

If you need help using the Mercurial patch queue extension, take a look at the
other document '00-README-hgtips' present in the current directory.

The script will help you create the following work package:

   1. Put the revlevant files for the review in a temp directory
   2. Generate a review template for the [PATCH 0/x]
   3. Open the generated template in the user's $EDITOR of choice
      and allow him to add the necessary comments
   4. Prompt the user for a review subject
   5. Prompt the user to enter emails of the peer reviewers, the devel
      list is added on CC automatically

The script currently accepts the following options:

Usage: submit-review.sh [-t] [-q|-r rev] [-d dest]

-t    Executes a dry-run (nothing will be emailed)
-q    Enables patch queue usage for the review process
-r    Uses the csX:csY committed revision range for the review process
      (default 'tip')
-d    Specifies where the review package gets dumped (default 'mktemp -d')

Using submit-review.sh with patch queue:

   % submit-review.sh -q

Using submit-review.sh with local changesets:

   % submit-review.sh -r csX:csY


Sending Patch for Review Manually
=================================

Nothing forces the developer to send patches for review using the helper script.
However some minor rules should be followed to try keeping the review process
uniform.

1. The diff format should be the same for everyone (~/.hgrc) :

   -----<-----<-----<-----<-----<-----
   [diff]
   git=1
   nodates=1
   showfunc=1
   -----<-----<-----<-----<-----<-----

2. The patch series should be sent inlined, one per email with an introduction
   email (e.g. [PATCH 0/x] Review Request for ...)

   No attachment!!!

   The reason to keep patch inlined is simple, comments for the review can be
   added in the reply, and attachment is a pain for review using text email
   client. Also properly inlined patches can be dropped as mbox files to use with
   Mercurial.

      a. Using the 'hg email' command, patch will be exported with the proper
         format, given that the proper settings for [diff] are set.
      b. If not using the 'hg email' command, or to export a single patch, use
         the 'hg export' command. Preferably export one changeset per patch if
         the changes are meant for different modules/areas.

3. Add the desired reviewers (if any) on the TO: line and the developer mailing
   list on the CC: line. It's probably better to have the developer on the TO:
   line and catch his email filter, most developer are subscribed to dozens of
   development mailing lists...

