#!/bin/sh
#
### BEGIN INIT INFO
# Provides: osaflogd
# Required-Start: $local_fs $remote_fs $network $syslog
# Required-Stop: $local_fs $remote_fs $network $syslog
# Should-Start: 
# Should-Stop: 
# Default-Start: 
# Default-Stop: 
# Short-Description: Start and stop the SAF-LOG Server
# Description: SAF-LOG Server Daemon
### END INIT INFO

osafdirfile=@sysconfdir@/@PACKAGE_NAME@/osafdir.conf
prog="osaflogd"
initscript=`basename $0`

# Source LSB functions library
. /lib/lsb/init-functions

if [ ! -r $osafdirfile ]; then
	logger -t $prog "can't read $osafdirfile, exiting."
	exit 6
else
	. $osafdirfile
	. $pkgsysconfdir/nid.conf
	. $pkgsysconfdir/logd.conf
fi	

binary=$pkglibdir/$prog
pidfile=$pkgpiddir/$prog.pid
lockfile=$lockdir/$initscript

RETVAL=0
NIDSERV="LOGD"
COMPNAMEFILE=$pkglocalstatedir/logd_comp_name

start() {
	export LD_LIBRARY_PATH=$pkglibdir:$LD_LIBRARY_PATH
	[ -p $NIDFIFO ] || exit 1
        if [ ! -x $binary ]; then
		echo "$NID_MAGIC:$NIDSERV:$DAEMON_NOT_FND" > $NIDFIFO
		exit 5
	fi
	export LOGD_COMP_NAME_FILE=$COMPNAMEFILE
	[ -d $LOGSV_ROOT_DIRECTORY ] || mkdir -p $LOGSV_ROOT_DIRECTORY
	echo -n "Starting $prog: "
	start_daemon -p $pidfile $binary $args
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		touch $lockfile
		log_success_msg
	else
		log_failure_msg
		echo "$NID_MAGIC:$NIDSERV:$DAEMON_START_FAILED" > $NIDFIFO
	fi
	return $RETVAL
}

instantiate() {
	echo -n "AMF Instantiating $prog: "
	echo $SA_AMF_COMPONENT_NAME > $COMPNAMEFILE
	if [ -e $lockfile ]; then
		killproc -p $pidfile $binary -USR1
	else
		start_daemon -p $pidfile $binary $args
	fi
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		log_success_msg
	else
		log_failure_msg
	fi
	return $RETVAL
}

stop() {
	echo -n "Stopping $prog: "
	killproc -p $pidfile $binary
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		rm -f $lockfile
		rm -f $COMPNAMEFILE
		log_success_msg
	else
		log_failure_msg
	fi
	return $RETVAL
}

restart() {
	stop
	start
}

tryrestart() {
	[ -e $lockfile ] && restart
	return 0
}

reload() {
	echo -n "Reloading $prog: "
	log_warning_msg
	logger -t $prog "reloading configuration is currently an unimplemented LSB feature"
	return 3
}

forcereload() {
	reload
	restart
	return 0
}

status() {
	pidofproc -p $pidfile $binary
	RETVAL=$?
	return $RETVAL
}

case "$1" in
  start)
	start
	RETVAL=$?
	;;
  instantiate)
	instantiate
	RETVAL=$?
	;;
  stop)
	stop
	RETVAL=$?
	;;
  restart)
	restart
	RETVAL=$?
	;;
  try-restart|condrestart)
	tryrestart
	RETVAL=$?
	;;
  reload)
	reload
	RETVAL=$?
	;;
  force-reload)
	forcereload
	RETVAL=$?
	;;
  status)
	status
	RETVAL=$?
	;;
  *)
	echo "Usage: $0 {start|instantiate|stop|restart|try-restart|reload|force-reload|status}"
	RETVAL=2
esac

exit $RETVAL
