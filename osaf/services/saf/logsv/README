#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#

GENERAL

This directory (logsv) contains an implementation of the SAF LOG service
version A.02.01.

The LOG service is implemented as a server process executing on the controllers
using a 2N redundancy model. Message based check pointing is
used to synchronize the two server instances.

The Log file property "High Availability flag" is not supported by LOG itself
but by using a replicated file system. The LOG implementation is unaware of 
such a file system and must be configured to use it, see below.


DEPENDENCIES

logsv depends of the following other OpenSAF services:
- MBCSV
- MDS
- BASE
- logtrace


DIRECTORY STRUCTURE

services/logsv/inc	Common header files used by both lga and lgs
services/logsv/lga	LOG library implementation
services/logsv/lgs	LOG server
services/logsv/utils	saflogger command
lib/lib_SaLog		LOG library staging
tests/logsv/src		Test suite


FILE STRUCTURE

Not yet ...


DATA STRUCTURES

lgs uses the following data structures:

- Control block. Statically allocated, one instance. Access through a global
pointer variable.

- Stream descriptors. Dynamically created, many instances. Accessed using
stream name or ID. Stored in patricia tree and array.

- Client descriptors. Dynamically created, many instances. Accessed using a
client ID. Stored in patricia tree. Contains the MDS address of the client.
Also contains a list of Client-Stream association objects, see below.

- Client-Stream association object. Dynamically created, many instances. One
instance per open stream. Contains a stream ID. Access through client
descriptor.

lga uses the following data structures:

- Control block. Statically allocated, one instance per library. Access
through a global variable. The control block contains the head of a linked
list with client descriptors.

- Client descriptor. Dynamically allocated. One instance per call to
saLogInitialize(). Contains callback pointers, handles and the head of a
linked list with streams descriptors for this client.

- Stream descriptor. Dynamically allocated. One instance per call to
saLogStreamOpen_2() or saLogStreamOpenAsync_2(). Contains internals IDs
and handles.


OVERLOAD PROTECTION

LOG uses a single mailbox used to communicate from the MDS thread to the
main thread. An IPC mailbox has four priority levels. By default a level
is unbounded in size, as many messages as the main memory allows can be
queued. The mailbox provides a mechanism to put a a limit on how many
messages that can be stored at the same time in it. LOG overload uses
that feature.

The highest level is used for control messages except for FINALIZE & CLOSE
messages. The reason is that we want to keep those at the same priority as
WRITE messages so that no writes will get discarded when a stream is closed
or a client finalize the API. The three other mailbox priority levels are
used for WRITE messages per stream type. Alarm use the next level, System
and Notification share the next level and all application streams share the
lowest priority level. The alarm level can never be bounded in size.

The levels used for system and application streams has an optional
configurable LOW and HIGH limit of queued messages. When the high limit
is hit, the level enters the FULL state. This state will not be left 
until the number of messages goes below the LOW limit. Messages received
in the meantime will be nacked with a TRYAGAIN, but only if the client has
requested so in the log record header. Otherwise it will be silently
discarded (but counted as such). CLOSE & FINALIZE messages will never be
rejected even though the level is full. If that happens, the message is
queued at the (unlimited) control message level.

Log records will be handled by the LOG server in the same priority.
All Alarm log records will be written to disk before any System/notification
log records. All System/notification log records will be written to disk
before any application log records are written to disk. This reduces the
risk to loose any important system events at sudden failure such as power
outage.

The low/high limits for system and app streams are configurable. See the
next section. Different app streams share the same limits.


CONFIGURATION

The LOG specification describes the configuration object class 
SaLogStreamConfig which requires the three streams alarm, notification and 
system to exist (in IMM). The two LOG classes and objects for the three
default streams are included in the OpenSAF IMM configuration.

Some implementation defined configuration is done using a configuration
file with environment variables. This config file is typically:

/etc/opensaf/logd.conf

The LOG server start script sources the configuration file before it starts
the LOG server. So any change in this will requires a restart of the LOG
server which implies OpenSAF on that node.

The following environment variable is required:

LOGSV_ROOT_DIRECTORY

This variable is needed to configure the "implementation defined root
directory" as mentioned in the spec. All log files will be stored directly 
in this directory or in a subdirectory. If HA characterisitcs are needed for 
LOG streams, configure this directory to point to replicated (shared & 
persistent) partition.

The following environment variables are optional:

LOG_STREAM_SYSTEM_HIGH_LIMIT

The high limit for the system/notification streams. Default unlimited. A
reasonable value would be 300 (messages).

LOG_STREAM_SYSTEM_LOW_LIMIT

The low limit for the system/notification streams. Only valid and used if
a high limit has been defined. Defaults to some percent of the high limit
(if not specified).

LOG_STREAM_APP_HIGH_LIMIT

The high limit for all application streams. Default unlimited. A
reasonable value would be 300 (messages).

LOG_STREAM_APP_LOW_LIMIT

The low limit for the all application streams. Only valid and used if
a high limit has been defined. Defaults to some percent of the high limit
(if not specified).

Don't forget the "export" keyword before the variable!


COMMAND LINE INTERFACE

The 'saflogger' command can be used to enter log records to any stream. Please
see the on line help for more information.


DEBUG

Log server traces are by default disabled. To enable/disable log server traces 
in a running system, send signal USR1 to the osaflogd process. Every time the 
trace state is toggled. Example:

	$ pkill -USR2 osaflogd

Traces are written to the file:

	$pkglogdir/osaflogd

To enable traces from the very start of the log server, uncomment the line:

        #args="--tracemask=0xffffffff"

in logd.conf (see CONFIGURATION above) and restart the cluster.

For fatal errors syslog is used.


TEST

Currently a simple unit test can be found in 'tests/logsv/src'. The test suite
is built by the main make system and is either install by 'make install' or by
installing the tools rpm.


TODO

- Implement missing API functions:
	- saLogStreamOpenAsync_2
	- saLogWriteLog
	- saLogLimitGet
	- saLogFilterSetCallback
	- saLogStreamOpenCallback
- NID start of the log server process.
- Implement CLM interaction as described in 3.2
- Implement Log filtering (IMM needed for configuration)
- Implement log file full actions other than rotate
- Write optimization, no sync for log write
- Cleanup/act on "FIX" and "TODO" comments
- Revisit trace statements, cleanup
- Cleanup remains of edsv (search for 'channel')
- Implement "6 Alarms and Notifications" (NTF needed)
- On standby, query local MDS-layer for status of an agent before updating data
  structures during sync.
- Distributed testing
- Document manual test cases


CONTRIBUTORS/MAINTAINERS

Arne Eriksson <Arne.R.Eriksson@ericsson.com>
Hans Feldt <Hans.Feldt@ericsson.com>
Niklas Nilsson

The LOG service was originally cloned from the edsv service.
