Support for reference integrity checking - SA_IMM_ATTR_NO_DANGLING (4.4)
========================================================================
http://sourceforge.net/p/opensaf/tickets/49/
OpenSAF 4.4 adds the immsv enhancement of supporting referential integrity
checking. The feature is available for clients that register with imm API
version A.2.13.

A new attribute definition flag has been defined:
#define SA_IMM_ATTR_NO_DANGLING   0x0000000004000000

This flag can only be set for attribute definitions where the attribute data
type is SaNameT and the attribute is a CONFIG attribute.

The SaNameT type signifies that the value is a reference to an IMM object,
i.e. the value is a DN. The IMM spec does not define any general consistency
constraints for such references. In particular, the value may be a DN for a
non existing object.

The new attribute definition flag SA_IMM_ATTR_NO_DANGLING added with this
enhancement, makes it possible for the imm service to monitor and maintain
referential integrity. That is, the imm service can releive the OI from the
burden of having to validate the existence of the object that the reference
points to.

The IMM service will thus guarantee that the value(s) of an attribute with the
SA_IMM_ATTR_NO_DANGLING flag, when set, contains the distinguished name(s) of
an existing IMM object(s). IMM will reject attempts to set it to anything that
is not the distinguished name of an existing object, and it will reject
attempts to delete objects that are referenced by such an attribute. This
validation is performed when the CCB is applied, which means that it will take
into account all changes performed within the CCB.

The NO_DANGLING flag is not allowed to be set for RUNTIME attributes,
(persistent or not). The reason is that runtime attribues and runtime objects
are not changed using CCBs/transactions and so it is impossible for the IMM
service to maintain inter-object consistency constraints for references
emanating from runtime data.

However, a NO_DANGLING flagged config attribute may refer *to* a PERSISTENT
runtime object (PRTO). This will prevent such a PRTO from being deleted untill
all such NO_DANGLING config attribute references to that object have been
removed. PRTOs are deleted either by the saImmOiRtObjectDelete operation or
indirectly by a cascading saImmOmCcbObjectDelete as part of a CCB.

The validation of NO_DANGLING constraints is done as part of the apply of a
CCB. The IMM service does such validation before any completed callbacks are
sent to any OIs involved in the CCB. If the validation fails, no completed and
of course no apply callback will be generated towards OIs. Instead an abort
callback is generated to all OIs.

The IMM will also perform interference checking in the operational phase of
a CCB. A failed interference check will typically only reject that latest
operation, without aborting the CCB. Interference checks are mainly for
regulating concurrency conflicts between CCBs, but also catch blatant errors
that are local to the operation. The rejection of such a bad operation is done
before any OIs receive the operation callback. If an interference check fails
then no OI will get that operation callback. This is important because there is
no "undo" callback for indiviudal operations. To undo any operation towards an
OI can only be done by aborting the entire CCB.

Here is a summary of the interference/operation checks performed in relaion
to NO_DANGLING in relation to each operation.


*******  CCB Object Create:

o   If the created object has a NO_DANGLING reference to a non-persistent
    runtime object, return INVALID_PARAM.

o   If the created object has a NO_DANGLING reference to an object deleted
    within the same CCB, return BAD_OPERATION.

o   If the created object has a NO_DANGLING reference to an object that is
    flagged for delete by another CCB, return BUSY.

o   If the created object has a NO_DANGLING reference to an object that is
    flagged for creation by another CCB, return BUSY.


******* CCB Object Modify (Add or Replace attribute value):

o   If an updated attribute value has a NO_DANGLING reference to a
    non-persistent runtime object, return INVALID_PARAM.

o   If an updated attribute value has a NO_DANGLING reference to an object that
    is deleted within the same CCB, return BAD_OPERATION.

o   If an updated attribute value has a NO_DANGLING reference to an object that
    is flagged for deletion by another CCB, return BUSY.

o   If an updated attribute value has a NO_DANGLING reference to an object that
    is flagged for creation by another CCB, return BUSY.


******* CCB Object Delete:

o   If an object is flagged for deletion or creation by another CCB with a
    NO_DANGLING reference to the object that will be deleted, then return BUSY.

o   If an object is flagged for creation by the same CCB, and has a NO_DANGLING
    reference to the object proposed for delete, then return BAD_OPERATION.


******* Persistent Runtime Object Delete:


o   Check if there is a NO_DANGLING reference to the PRTO, if there is the
    PRTO delete operation returns BAD_OPERATION.


*******  CCB Apply.


o   If the apply would cause any NO_DANGLING reference attribute in
    any object created or modifyed by the ccb to become dangling, then
    return FAILED_OPERATION(abort). 

o  If a NO_DANGLING reference attribute points to a non persistent RTO then
   return FAILED_OPERATION(abort).

o  If a NO_DANGLING reference attribute points to an an object scheduled for
   delete in another ccb then return FAILED_OPERATION(abort).

o  If a NO_DANGLING reference attribute points to an an object scheduled for
   create in another ccb then return FAILED_OPERATION(abort).

o  If an object scheduled for delete in this CCB is pointed to by some
   NO_DANGLING reference in another object and the other object is not also
   scheduled for delete by this ccb then return FAILED_OPERATION(abort).


Support search for objects having NO_DANGLING refrence to a target (4.4)
========================================================================
http://sourceforge.net/p/opensaf/tickets/50/
OpenSAF 4.4 adds the immsv enhancement of supporting search/iteration
for finding all objects that have a NO_DANGLING reference to a provided
target. This feature is available for clients that register with imm API
version A.2.13.

The search API saImmOmSearchInitialize_2 is defined in section 4.5.1 of
the IMM A.02.01 specification.

Such a search will be created by filling in the arguments of
saImmOmSearchInitialize_2 in the following way:

1) The searchOptions parameter must set a new search-criteria flag:

  #define SA_IMM_SEARCH_NO_DANGLING_DEPENDENTS  0x0000000100000000

This flag indicates that the intention of the search is to find all
objects that have any NO_DANGLING reference pointing to a particular
target object. The target object must of course be a currently existing
imm object. Attribute-options (such as SA_IMM_SEARCH_GET_NO_ATTR) may
also be or-ed to the searchOptions argument in the normal way, to avoid
fetching not needed data.

2) The target object is identified in the searchParam parameter as follows:

 a) attrName must be set to NULL.
 b) attrValue must be the DN of an object.
 c) attrValueType may be either SA_IMM_ATTR_SANAMET or SA_IMM_ATTR_SASTRINGT.

The value must of course be the DN of a currently existing object. The use
of SaStringT is allowed here to accommodate future enhancements that
replace the use of SaNameT with SaStringT.

This makes it possible to find all objects that are no-dangling dependent
on the target. Only NO_DANGLING references will be returned because only
such references can efficiently be located for any given object DN as
target.

The return result is an iteration, as usual, where each searchNext returns
an object that contains one or more NO_DANGLING flagged references pointing
to the target. The reference attributes may be included (along with other
attributes!) or not depending on the search options setting, e.g.
SA_IMM_SEARCH_GET_ALL_ATTR.

