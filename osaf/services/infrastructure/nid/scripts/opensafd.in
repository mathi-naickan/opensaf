#!/bin/sh
#
### BEGIN INIT INFO
# Provides: opensafd
# Required-Start: $local_fs $remote_fs $network $syslog
# Required-Stop: $local_fs $remote_fs $network $syslog
# Should-Start: 
# Should-Stop: 
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: Start and stop the OpenSAF node
# Description: Start and stop the OpenSAF node
### END INIT INFO

osafdirfile=@sysconfdir@/@PACKAGE_NAME@/osafdir.conf
prog="opensafd"

# Source LSB functions library
. /lib/lsb/init-functions

if [ ! -r $osafdirfile ]; then
	logger -t $prog "can't read $osafdirfile, exiting."
	exit 6
else
	. $osafdirfile
	. $pkgsysconfdir/nid.conf
fi	

shmdir=/dev/shm/opensaf
binary=$pkglibdir/$prog
lockfile=$lockdir/$prog
amfnd_bin=$pkglibdir/osafamfnd
amfnd_pid=$pkgpiddir/osafamfnd.pid

MANAGE_TIPC=${OPENSAF_MANAGE_TIPC:="yes"}
RETVAL=0
TERMTIMEOUT=${OPENSAF_TERMTIMEOUT:=60}

nodetype=$(cat $pkgsysconfdir/node_type)
nodeinitdotconf=$pkgsysconfdir/nodeinit.conf.$nodetype

unload_tipc() {
	# FIXME: Once tipc scripts are cleaned
	pkill -9 nid_tipc*

  	# Unload TIPC if already loaded
	if [ $MANAGE_TIPC = "yes" ] && grep tipc /proc/modules >/dev/null 2>&1; then
		modprobe -r tipc >/dev/null 2>&1
		if [ $? -eq 1 ]; then
			logger -t $prog "warning: TIPC module unloading failed"
		fi
	fi
}

check_tipc() {
	# Exit if tipc-config is not installed
	if [ ! -x /sbin/tipc-config ]; then
		which tipc-config >/dev/null 2>&1
		if [ $? -eq 1 ] ; then
			logger -s -t $prog "Can't find tipc-config in the PATH, exiting."
			exit 5
		fi
	fi

	unload_tipc
}

check_env() {
	# Make sure this kernel has POSIX shared memory configured
	if [ ! -d /dev/shm ]; then
		logger -s -t $prog "POSIX shared memory (/dev/shm) not enabled, exiting."
		exit 6
	fi

	# /dev/shm, /var/lock & /var/run could be tmpfs mounts and needs to be 
	# recreated at each boot
	directories="$shmdir $lockdir $pkgpiddir"
	for directory in $directories; do
		mkdir -p $directory
		if [ -n "$OPENSAF_GROUP" ]; then
			getent group $OPENSAF_GROUP > /dev/null && chgrp $OPENSAF_GROUP $directory
		fi
		if [ -n "$OPENSAF_USER" ]; then
			getent passwd $OPENSAF_USER > /dev/null && chown $OPENSAF_USER $directory
		fi
	done

	rm -f $pkglogdir/nid.log
}

clean_shm() {
	# Remove shared memory files created by OpenSAF
	if [ -d /dev/shm/opensaf ]; then
		rm -rf /dev/shm/opensaf
	fi
}

enable_coredump() {
	core_size="unlimited"
	core_pattern="/var/crash/opensaf/core_%t.%e.%p"

	if [ ! -d /var/crash/opensaf ]; then
		mkdir -p /var/crash/opensaf
	fi

	if [ `ulimit -c` = 0 ]; then
		ulimit -c $core_size
	fi
	echo $core_pattern > /proc/sys/kernel/core_pattern
}

final_clean() {
	# Loop throught all the OpenSAF LSB CLC-CLI scripts to clean staling pid/lock
	if [ "$MDS_TRANSPORT" = "TCP" ] ; then
		pkill -9 dh_monitoring* >/dev/null 2>&1
	fi
	for cmd in `ls $pkgclcclidir/osaf-*`; do
		$cmd stop >/dev/null 2>&1
	done

	if [ "$MDS_TRANSPORT" = "TIPC" ] ; then
		unload_tipc
	else
		rm -f $pkglocalstatedir/osaf_dtm_intra_server
	fi
	clean_shm

	rm -f $lockfile
	rm -f $NIDFIFO
	rm -f $pkglocalstatedir/node_id
}

generate_nodeid() {
	CHASSIS_ID_FILE=$pkgsysconfdir/chassis_id
	SLOT_ID_FILE=$pkgsysconfdir/slot_id
	SUBSLOT_ID_FILE=$pkgsysconfdir/subslot_id
	if ! test -f "$CHASSIS_ID_FILE"; then
		echo "$CHASSIS_ID_FILE doesnt exists, exiting ...." 
		exit 1
	fi
	CHASSIS_ID=`cat "$CHASSIS_ID_FILE"`
	if [ "$CHASSIS_ID" -gt "16" ] || [ "$CHASSIS_ID" -lt "1" ]  
	then 
		echo "CHASSIS ID Should be in the range of 1 to 16"
		echo "Quitting......"
		exit 1
	fi
	if ! test -f "$SLOT_ID_FILE"; then
		echo "$SLOT_ID_FILE doesnt exists, exiting ...." 
		exit 1
	fi
	SLOT_ID=`cat "$SLOT_ID_FILE"`
	if [ "$SLOT_ID" -gt "255" ] || [ "$SLOT_ID" -lt "1" ]  
	then 
		echo "SLOT ID Should be in the range of 1 to 255"
		echo "Quitting......"
		exit 1
	fi
	if ! test -f $SUBSLOT_ID_FILE; then
		echo "$SLOT_ID_FILE doesnt exist, exiting ...." 
		exit 1
	fi
	SUBSLOT_ID=`cat $SUBSLOT_ID_FILE`
	if [ "$SUBSLOT_ID" -gt "15" ] || [ "$SUBSLOT_ID" -lt "0" ]; then
		echo "SUBSLOT ID Should be in the range of 0 to 15"
		echo "Quitting......"
		exit 1
	fi
	printf "00%02x%02x%02x\n" $CHASSIS_ID $SLOT_ID $SUBSLOT_ID > $pkglocalstatedir/node_id
	chmod 744 $pkglocalstatedir/node_id
}

check_transport() {
	if [ "$MDS_TRANSPORT" = "TIPC" ] ; then
		# Transport TIPC
		check_tipc
		sed -i 's/#*\(.*nid_tipc*\)/\1/gI' $nodeinitdotconf
		#Now comment the line in the nodeinit.conf for TIPC
		grep "osaf-dtm:DTM" $nodeinitdotconf | grep "#" > /dev/null
		ret_val=$?
		if [ $ret_val -ne 0 ] ; then
			#comment the line 
		 	sed -i 's/\(.*osaf-dtm:DTM*\)/#\1/gI' $nodeinitdotconf
		fi
	else
		# Transport TCP 
		#Now comment the line in the nodeinit.conf for TCP
		sed -i 's/#*\(.*osaf-dtm:DTM*\)/\1/gI' $nodeinitdotconf
		grep "nid_tipc" $nodeinitdotconf | grep "#" > /dev/null
		ret_val=$?
		if [ $ret_val -ne 0 ] ; then
			#comment the line 
		 	sed -i 's/\(.*nid_tipc*\)/#\1/gI' $nodeinitdotconf
		fi
		generate_nodeid
	fi
}

start() {
	export LD_LIBRARY_PATH=$pkglibdir:$LD_LIBRARY_PATH
        pidofproc -p $amfnd_pid $amfnd_bin > /dev/null 2>&1
	lsb_status=$?
	if [ $lsb_status -eq 0 ]; then
       		RETVAL=0
		log_success_msg
		return $RETVAL
	fi

	logger -t $prog "Starting OpenSAF Services"

	[ -x $daemon ] || exit 5

	check_env
	check_transport

	# Comment/Uncomment if you want cores disabled/enabled
	#enable_coredump

	echo -n "Starting OpenSAF Services: "
	start_daemon $binary $args
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		logger -t $prog "OpenSAF services successfully started"
		touch $lockfile
		log_success_msg
	else
		final_clean
		log_failure_msg
		if [ $REBOOT_ON_FAIL_TIMEOUT -ne 0 ]; then
			logger -t $prog "Starting OpenSAF failed, rebooting..." 
			sleep $REBOOT_ON_FAIL_TIMEOUT
			/sbin/reboot &
		else
			logger -t $prog "Starting OpenSAF failed"
		fi
	fi
	return $RETVAL
}

stop() {
	logger -t $prog "Stopping OpenSAF Services"

	if [ "$MDS_TRANSPORT" = "TCP" ] ; then
		pkill -9 dh_monitoring* >/dev/null 2>&1
	fi

	amfpid=`pidofproc -p $amfnd_pid $amfnd_bin`
	echo -n "Stopping OpenSAF Services: "
	if [ -n "$amfpid" ]; then
		kill $amfpid
		timeout=$TERMTIMEOUT
		while [ $timeout -gt 0 ]; do
			sleep 1
			[ -d /proc/$amfpid ] || break
			timeout=$((timeout-1))
		done
		[ -d /proc/$amfpid ] && RETVAL=1
	else
		pkill -9 osaf* >/dev/null 2>&1
	fi

	final_clean

	if [ $RETVAL -eq 0 ]; then
		logger -t $prog "OpenSAF services successfully stopped"
		log_success_msg
	else
		log_failure_msg
		# If AMF fails to terminate its components,
		# this system is out of control, reboot it now!
		if [ $REBOOT_ON_FAIL_TIMEOUT -ne 0 ]; then
			logger -t $prog "Stopping OpenSAF failed, rebooting..."
			sleep $REBOOT_ON_FAIL_TIMEOUT
			/sbin/shutdown -r now "OpenSAF termination failed (timeout)"
		else
			logger -t $prog "Stoping OpenSAF failed"
		fi
	fi
	return $RETVAL
}

restart() {
	stop
	start
}

tryrestart() {
	[ -e $lockfile ] && restart
	return 0
}

reload() {
	echo -n "Reloading $prog: "
	log_warning_msg
	logger -t $prog "reloading configuration is currently an unimplemented LSB feature"
	return 3
}

forcereload() {
	reload
	restart
	return 0
}

status() {
	amfpid=`pidofproc -p $amfnd_pid $amfnd_bin`
	if [ -n "$amfpid" ]; then
		amf-state siass ha
		RETVAL=$?
	else
		echo "The OpenSAF HA Framework is not running"
		RETVAL=3
	fi

	return $RETVAL
}

case "$1" in
  start)
	start
	RETVAL=$?
	;;
  stop)
	stop
	RETVAL=$?
	;;
  restart)
	restart
	RETVAL=$?
	;;
  try-restart|condrestart)
	tryrestart
	RETVAL=$?
	;;
  reload)
	reload
	RETVAL=$?
	;;
  force-reload)
	forcereload
	RETVAL=$?
	;;
  status)
	status
	RETVAL=$?
	;;
  *)
	echo "Usage: $0 {start|stop|restart|try-restart|reload|force-reload|status}"
	RETVAL=2
esac

exit $RETVAL
